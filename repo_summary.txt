{
  "gpt_code_ui/__init__.py": "",
  "gpt_code_ui/kernel_program/__init__.py": "",
  "gpt_code_ui/kernel_program/config.py": "import logging\nimport os\n\nIDENT_KERNEL_MANAGER = \"kernel_manager\"\nIDENT_MAIN = \"main\"\nKERNEL_PID_DIR = \"process_pids\"\nSNAKEMQ_PORT = int(os.environ.get(\"SNAKEMQ_PORT\", 8765))\n\n\ndef get_logger():\n    logging.basicConfig(\n        format=\"[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s\"\n    )\n\n    logger = logging.getLogger(__name__)\n    if \"DEBUG\" in os.environ:\n        logger.setLevel(logging.DEBUG)\n    return logger",
  "gpt_code_ui/kernel_program/kernel_manager.py": "import sys\nimport subprocess\nimport os\nimport queue\nimport json\nimport signal\nimport pathlib\nimport threading\nimport time\nimport atexit\nimport traceback\n\nfrom time import sleep\nfrom jupyter_client import BlockingKernelClient\n\nfrom dotenv import load_dotenv\nload_dotenv('.env')\n\nimport gpt_code_ui.kernel_program.utils as utils\nimport gpt_code_ui.kernel_program.config as config\n\n",
  "gpt_code_ui/kernel_program/launch_kernel.py": "if __name__ == \"__main__\":\n    from ipykernel import kernelapp as app\n\n    app.launch_new_instance()",
  "gpt_code_ui/kernel_program/main.py": "import os\nimport subprocess\nimport sys\nimport pathlib\nimport json\nimport logging\nimport time\n\nimport asyncio\nimport json\nimport threading\n\nfrom queue import Queue\n\nfrom flask import Flask, request, jsonify\nfrom flask_cors import CORS  ",
  "gpt_code_ui/kernel_program/utils.py": "import re\nimport json\nimport snakemq.link\nimport snakemq.packeter\nimport snakemq.messaging\nimport snakemq.message\n\nimport gpt_code_ui.kernel_program.config as config\n\ndef escape_ansi(line):\n    ansi_escape = re.compile(r\"(?:\\x1B[@-_]|[\\x80-\\x9F])[0-?]*[ -/]*[@-~]\")\n    return ansi_escape.sub(\"\", line)\n\n\ndef send_json(messaging, message, identity):\n    message = snakemq.message.Message(json.dumps(message).encode(\"utf-8\"), ttl=600)\n    messaging.send_message(identity, message)\n\ndef init_snakemq(ident, init_type=\"listen\"):\n    link = snakemq.link.Link()\n    packeter = snakemq.packeter.Packeter(link)\n    messaging = snakemq.messaging.Messaging(ident, \"\", packeter)\n    if init_type == \"listen\":\n        link.add_listener((\"localhost\", config.SNAKEMQ_PORT))\n    elif init_type == \"connect\":\n        link.add_connector((\"localhost\", config.SNAKEMQ_PORT))\n    else:\n        raise Exception(\"Unsupported init type.\")\n    return messaging, link",
  "gpt_code_ui/main.py": "",
  "gpt_code_ui/webapp/__init__.py": "",
  "gpt_code_ui/webapp/main.py": "",
  "setup.py": "from setuptools import setup, find_packages\nfrom os import path\n\nthis_directory = path.abspath(path.dirname(__file__))\nwith open(path.join(this_directory, 'README.md'), encoding='utf-8') as f:\n    long_description = f.read()\n\nsetup(\n    name='gpt_code_ui',\n    version='0.42.40',\n    description=\"An Open Source version of ChatGPT Code Interpreter\",\n    long_description=long_description,\n    long_description_content_type='text/markdown',  "
}